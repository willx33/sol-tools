"""Type stubs for the dragon_adapter module."""

from typing import Any, Dict, List, Optional, Union, Callable, TypeVar, Tuple
from sol_tools.core.base_adapter import BaseAdapter

class DragonAdapter(BaseAdapter):
    """Adapter for Dragon module."""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None) -> None: ...
    
    async def initialize(self) -> bool: ...
    
    def bundle_finder(self, **kwargs: Any) -> Any: ...
    
    def scan_all_tx(self, **kwargs: Any) -> Any: ...
    
    def bulk_wallet_checker(self, **kwargs: Any) -> Any: ...
    
    def top_traders(self, **kwargs: Any) -> Any: ...
    
    def timestamp_transactions(self, **kwargs: Any) -> Any: ...
    
    def copy_trade_wallet_finder(self, **kwargs: Any) -> Any: ...
    
    def top_holders(self, **kwargs: Any) -> Any: ...
    
    def early_buyers(self, **kwargs: Any) -> Any: ...
    
    def eth_bulk_wallet_checker(self, **kwargs: Any) -> Any: ...
    
    def eth_top_traders(self, **kwargs: Any) -> Any: ...
    
    def eth_timestamp_transactions(self, **kwargs: Any) -> Any: ...
    
    def eth_scan_all_tx(self, **kwargs: Any) -> Any: ...
    
    def gmgn(self, **kwargs: Any) -> Any: ...
    
    def purge_files(self, **kwargs: Any) -> Any: ...
    
    def check_proxy_file(self, **kwargs: Any) -> Any: ...
    
    def utils(self, **kwargs: Any) -> Any: ... 